# -*- coding: utf-8 -*-
"""digit-recongnition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W04AlXXZdwjitdIaKu4r16BXT2K_HZCB
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""# ***MD: TAMIM HASAN
#     ID:181-35-2432***
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow import keras
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns

#traind data
train = pd.read_csv('../input/digit-recognizer/train.csv')
train.head()

#test data
test = pd.read_csv('../input/digit-recognizer/test.csv')
test.head()

#train shape
train.shape

#test shape
test.shape

x = train.drop(['label'],axis=1)
X = np.array(x).reshape(len(train),28*28) / 255
X.shape

y = train['label']
y.shape

x_test = np.array(test).reshape(len(test),28*28) / 255
x_test.shape

from sklearn.model_selection import train_test_split
X_train, X_val, y_train, y_val = train_test_split(X,y,test_size=0.15,random_state=42)

X_train.shape, y_train.shape

X_val.shape, y_val.shape

plt.imshow(X[2].reshape(28,28))

y[2]

#Simple neural network with no hidden layers
ann =keras.Sequential([
     keras.layers.Dense(10, input_shape=(784,),activation='sigmoid')
])
ann.compile(
             optimizer='adam',
             loss='sparse_categorical_crossentropy',
             metrics=['accuracy'])
ann.fit(X_train,y_train,epochs=20)

ann.evaluate(X_val,y_val)

y_predict = ann.predict(X_val)
y_predict

y_predicted_labels = [np.argmax(i) for i in y_predict]
y_predicted_labels[0]

cn = tf.math.confusion_matrix(y_val,y_predicted_labels)
plt.figure(figsize=(8,6))
sns.heatmap(cn,annot=True,fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

#Using hidden layer
ann_hidden =keras.Sequential([
    keras.layers.Dense(100, input_shape=(784,), activation='relu'),
    keras.layers.Dense(10,activation='sigmoid')
])
ann_hidden.compile(
             optimizer='adam',
             loss='sparse_categorical_crossentropy',
             metrics=['accuracy'])
ann_hidden.fit(X_train,y_train,epochs=20)

ann_hidden.evaluate(X_val,y_val)

y_predict = ann_hidden.predict(X_val)
y_predict

y_predicted_labels = [np.argmax(i) for i in y_predict]
y_predicted_labels[2]

cn = tf.math.confusion_matrix(y_val,y_predicted_labels)
plt.figure(figsize=(8,6))
sns.heatmap(cn, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

#Flatten Layer
ann_flat = keras.Sequential([
           keras.layers.Flatten(input_shape=(28,28)),
           keras.layers.Dense(100, activation='relu'),
           keras.layers.Dense(10, activation='sigmoid')
])
ann_flat.compile(
             optimizer='adam',
             loss='sparse_categorical_crossentropy',
             metrics=['accuracy'])
ann_flat.fit(X_train,y_train,epochs=20)

ann_flat.evaluate(X_val,y_val)

y_predict = ann_hidden.predict(x_test)
y_predict

y_predicted_labels = [np.argmax(i) for i in y_predict]
y_predicted_labels[2]

#Using CNN
cnn = keras.Sequential([
    keras.layers.Conv2D(30, (3,3), activation='relu', input_shape=(28, 28, 1)),
    keras.layers.MaxPooling2D((2,2)),
 
    keras.layers.Flatten(),
    keras.layers.Dense(100, activation='relu'),
    keras.layers.Dense(10, activation='sigmoid')
])

cnn.compile(
             optimizer='adam',
             loss='sparse_categorical_crossentropy',
             metrics=['accuracy'])

X_train = X_train.reshape(-1,28,28,1)
X_train.shape

x_test = x_test.reshape(-1,28,28,1)
x_test.shape

cnn.fit(X_train, y_train, epochs=20)

y_predict_final = cnn.predict(x_test)

y_predicted_labels_final =[np.argmax(i) for i in y_predict_final]

image_id = range(1, y_predict_final.shape[0] + 1)
submission_file = pd.DataFrame({'ImageId':image_id, 'Label':y_predicted_labels_final})
submission_file.to_csv('digit_recognizer_submission_final_cnn_ann.csv',index=False)

submission_file.head()